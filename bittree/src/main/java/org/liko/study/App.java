package org.liko.study;

import org.junit.Test;

/**
 * 算法面试题
 */
public class App {
    @Test
    public void test1() {
        //题目：古典问题：有一对兔子，从出生后第3个月起每个月都生一对兔子，小兔子长到第四个月后每个月又生一对兔子，假如兔子都不死，问每个月的兔子总数为多少？
        //1.程序分析：   兔子的规律为数列1,1,2,3,5,8,13,21....
        for(int i = 1; i < 20; i++) {
            System.out.println(f(i));
        }
    }

    public long f(long i) {
        if(i == 1 || i == 2) {
            return 1;
        } else {
            return f(i - 1) + f(i - 2);
        }
    }

    /****************************************************************************************/

    @Test
    public void test2() {
        //题目：判断101-200之间有多少个素数，并输出所有素数。
        for(int i = 101; i <= 200; i++) {
            if(isPrimeNum(i)) {
                System.out.println(i);
            }
        }
    }

    public boolean isPrimeNum(int i) {
        boolean returnFlag = true;
        for(int j = i - 1; j > 1; j --) {
            if(i % j == 0) {
                returnFlag = false;
                break;
            }
        }
        return returnFlag;
    }

    /****************************************************************************************/

    @Test
    public void test3() {
        //题目：打印出所有的 "水仙花数 "，所谓 "水仙花数 "是指一个三位数，其各位数字立方和等于该数本身。例如：153是一个 "水仙花数 "，因为153=1的三次方＋5的三次方＋3的三次方。
        for(int i = 100; i < 1000; i++) {
            if(isDaffodilNum(i)) {
                System.out.println(i);
            }
        }
    }

    public boolean isDaffodilNum(int i) {
        int x = i / 100;
        int y = i % 100 / 10;
        int z = i % 10;

//        System.out.println("x : " + x + ", y : " + y + ", z : " + z);

        double j = Math.pow(x, 3) + Math.pow(y, 3) + Math.pow(z, 3);
        if(i == j) {
            return true;
        }
        return false;
    }

    /****************************************************************************************/
    @Test
    public void test4() {
        //题目：将一个正整数分解质因数。例如：输入90,打印出90=2*3*3*5。
    }
    /****************************************************************************************/
    /****************************************************************************************/
    /****************************************************************************************/
    /****************************************************************************************/
    /****************************************************************************************/
    /****************************************************************************************/

}
